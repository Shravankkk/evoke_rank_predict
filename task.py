import numpy as np
from scipy.interpolate import interp1d

difficulty_levels = {
        0.40: {
            'data': {105:1538034,110:1503034,115:1463034,120:1423034,125: 1388034, 130: 1356746, 135: 1319904, 140: 1289613, 145: 1252352, 150: 1224621, 155: 1194436, 160: 1158174, 165: 1135103, 170: 1107641, 175: 1081356, 180: 1054904, 185: 1030293, 190: 1006286, 195: 982932, 200: 961045, 205: 938596, 210: 917239, 215: 896994, 220: 876284, 225: 856661, 230: 837628, 235: 818693, 240: 800131, 245: 782756, 250: 764200, 255: 747338, 260: 730854, 265: 713927, 270: 697623, 275: 681842, 280: 665765, 285: 651078, 290: 635915, 295: 621916, 300: 607704, 305: 593752, 310: 579714, 315: 565749, 320: 552629, 325: 539735, 330: 527495, 335: 514399, 340: 501935, 345: 490316, 350: 478057, 355: 466616, 360: 455281, 365: 443727, 370: 432626, 375: 421741, 380: 410904, 385: 400608, 390: 390490, 395: 380882, 400: 370239, 405: 360380, 410: 350792, 415: 341573, 420: 332477, 425: 323035, 430: 314114, 435: 305160, 440: 296216, 445: 287673, 450: 279299, 455: 271304, 460: 263151, 465: 255512, 470: 247540, 475: 239591, 480: 231975, 485: 224357, 490: 216793, 495: 209716, 500: 202174, 505: 194991, 510: 188063, 515: 181006, 520: 174416, 525: 167427, 530: 160866, 535: 154524, 540: 147942, 545: 141343, 550: 135011, 555: 128969, 560: 122315, 565: 116003, 570: 110175, 575: 104098, 580: 97974, 585: 92209, 590: 86313, 595: 80786, 600: 75015, 605: 69461, 610: 63875, 615: 58352, 620: 53192, 625: 48013, 630: 43257, 635: 38534, 640: 33903, 645: 29445, 650: 25359, 655: 21663, 660: 17975, 665: 14713, 670: 11661, 675: 8987, 680: 6797, 685: 4937, 690: 3330, 695: 2237, 700: 1404, 705: 707, 710: 344, 715: 70, 720:1},
            'num_students': 2333297
        },
        0.50: {
            'data': {105: 840000 ,110: 814104, 115: 799033, 120: 775457, 125: 754880, 130: 736311, 135: 715281, 140: 699897, 145: 679283, 150: 664036, 155: 647961, 160: 631465, 165: 616417, 170: 601100, 175: 586763, 180: 572530, 185: 560148, 190: 546649, 195: 532785, 200: 521130, 205: 508729, 210: 496191, 215: 484732, 220: 473931, 225: 462450, 230: 451469, 235: 440802, 240: 429743, 245: 419506, 250: 410695, 255: 399626, 260: 390468, 265: 380859, 270: 371281, 275: 363122, 280: 353611, 285: 345180, 290: 336828, 295: 327998, 300: 320104, 305: 311673, 310: 303502, 315: 295880, 320: 287915, 325: 280629, 330: 273466, 335: 266053, 340: 259215, 345: 251693, 350: 245396, 355: 238567, 360: 231897, 365: 226049, 370: 219159, 375: 213001, 380: 206832, 385: 200917, 390: 194845, 395: 189042, 400: 182984, 405: 177346, 410: 171861, 415: 166347, 420: 160756, 425: 155391, 430: 150426, 435: 144860, 440: 139931, 445: 134665, 450: 129723, 455: 124978, 460: 120245, 465: 115471, 470: 110795, 475: 106419, 480: 101938, 485: 97442, 490: 93330, 495: 89136, 500: 85065, 505: 80837, 510: 76812, 515: 72848, 520: 69148, 525: 65220, 530: 61644, 535: 58033, 540: 54320, 545: 50982, 550: 47583, 555: 44211, 560: 40933, 565: 37851, 570: 34869, 575: 32063, 580: 29236, 585: 26526, 590: 23937, 595: 21204, 600: 19064, 605: 16729, 610: 14761, 615: 12875, 620: 11226, 625: 9570, 630: 7960, 635: 6907, 640: 5568, 645: 4486, 650: 3578, 655: 2751, 660: 2088, 665: 1565,670:1250, 675: 830,680:630,685:440,690:280, 695: 126,700:80,705:40,710:15,715:4,720:1},
            'num_students': 1366945
        },
        0.60: {
            'data': {105: 1211215, 110: 1181265, 115: 1144828, 120: 1108742, 125: 1073696, 130: 1043133, 135: 1007869, 140: 982348, 145: 954930, 150: 927060, 155: 902013, 160: 879039, 165: 854446, 170: 830961, 175: 809739, 180: 787550, 185: 766689, 190: 747463, 195: 727765, 200: 709283, 205: 690241, 210: 672926, 215: 655606, 220: 638978, 225: 622955, 230: 606175, 235: 591162, 240: 575275, 245: 559969, 250: 545785, 255: 531094, 260: 516898, 265: 503274, 270: 489696, 275: 477131, 280: 463868, 285: 451317, 290: 439619, 295: 426921, 300: 415674, 305: 404180, 310: 392579, 315: 381511, 320: 370689, 325: 360820, 330: 350228, 335: 339818, 340: 330149, 345: 320734, 350: 311325, 355: 301697, 360: 292795, 365: 283974, 370: 275858, 375: 267107, 380: 258820, 385: 250944, 390: 242800, 395: 235160, 400: 227842, 405: 220280, 410: 213170, 415: 205811, 420: 199362, 425: 192356, 430: 186115, 435: 179729, 440: 173194, 445: 166951, 450: 161081, 455: 155118, 460: 149155, 465: 143529, 470: 138172, 475: 132557, 480: 127129, 485: 122175, 490: 116938, 495: 111565, 500: 106980, 505: 101932, 510: 97177, 515: 92740, 520: 88114, 525: 83462, 530: 79283, 535: 74837, 540: 70417, 545: 66478, 550: 62593, 555: 58591, 560: 54636, 565: 50822, 570: 47457, 575: 43944, 580: 40425, 585: 37044, 590: 33847, 595: 30782, 600: 27800, 605: 25159, 610: 22521, 615: 19973, 620: 17549, 625: 15217, 630: 13164, 635: 11192, 640: 9498, 645: 8016, 650: 6659, 655: 5395, 660: 4374, 665: 3434, 670: 2664, 675: 2016, 680: 1541, 685: 1074, 690: 751, 695: 493, 700: 299, 705:140, 710:36, 715:8, 720:1},
            'num_students': 2038596
        },
        0.65: {
            'data': {105: 918957, 110: 898992, 115: 871371, 120: 844583, 125: 820325, 130: 796332, 135: 773336, 140: 752069, 145: 731478, 150: 712233, 155: 693119, 160: 675543, 165: 658284, 170: 641713, 175: 625884, 180: 609977, 185: 595467, 190: 581016, 195: 567589, 200: 554165, 205: 541080, 210: 528340, 215: 515952, 220: 503861, 225: 492381, 230: 480635, 235: 469414, 240: 458347, 245: 447604, 250: 437236, 255: 426874, 260: 416817, 265: 406979, 270: 397016, 275: 387209, 280: 377658, 285: 368246, 290: 359074, 295: 350218, 300: 341157, 305: 332693, 310: 323724, 315: 315486, 320: 307066, 325: 298535, 330: 290596, 335: 282680, 340: 274789, 345: 266748, 350: 259448, 355: 252045, 360: 244579, 365: 237201, 370: 230027, 375: 222946, 380: 216267, 385: 209239, 390: 202723, 395: 196068, 400: 189643, 405: 183277, 410: 176990, 415: 170992, 420: 164808, 425: 158869, 430: 153195, 435: 147516, 440: 141791, 445: 136448, 450: 131169, 455: 125750, 460: 120525, 465: 115607, 470: 110613, 475: 105590, 480: 100833, 485: 96012, 490: 91594, 495: 87262, 500: 82698, 505: 78401, 510: 74525, 515: 70337, 520: 66403, 525: 62713, 530: 58980, 535: 55280, 540: 51672, 545: 48262, 550: 45111, 555: 41706, 560: 38590, 565: 35666, 570: 32734, 575: 30100, 580: 27492, 585: 25020, 590: 22523, 595: 20189, 600: 18048, 605: 16184, 610: 13989, 615: 12299, 620: 10638, 625: 9227, 630: 7897, 635: 6645, 640: 5523, 645: 4587, 650: 3788, 655: 3202, 660: 2437, 665: 1987, 670: 1552, 675: 1169, 680: 872, 685: 653, 690: 459, 695: 284, 700: 149, 705: 71, 710: 37, 715: 14, 720: 1},
            'num_students': 1544273
        },
        0.70: {
            'data': {105: 958171, 110: 923339, 115: 890652, 120: 860686, 125: 832051, 130: 805021, 135: 780414, 140: 756438, 145: 734214, 150: 712358, 155: 691913, 160: 672720, 165: 654312, 170: 636375, 175: 619188, 180: 602918, 185: 586946, 190: 571431, 195: 556914, 200: 542269, 205: 528210, 210: 514802, 215: 501542, 220: 489078, 225: 476602, 230: 464372, 235: 452614, 240: 441272, 245: 429886, 250: 418703, 255: 408332, 260: 397624, 265: 387343, 270: 377664, 275: 367612, 280: 357921, 285: 348702, 290: 339529, 295: 330645, 300: 321723, 305: 312860, 310: 304452, 315: 296054, 320: 287897, 325: 279796, 330: 271989, 335: 264243, 340: 256851, 345: 249307, 350: 242252, 355: 235306, 360: 228577, 365: 221736, 370: 215325, 375: 208553, 380: 202309, 385: 196390, 390: 190363, 395: 184321, 400: 178687, 405: 172710, 410: 167011, 415: 161614, 420: 156426, 425: 150969, 430: 145673, 435: 140762, 440: 135808, 445: 131114, 450: 126211, 455: 121564, 460: 117086, 465: 112621, 470: 108321, 475: 104006, 480: 99795, 485: 95690, 490: 91576, 495: 87698, 500: 83882, 505: 80011, 510: 76355, 515: 72773, 520: 69210, 525: 65653, 530: 62218, 535: 58835, 540: 55458, 545: 52134, 550: 48824, 555: 45584, 560: 42656, 565: 39611, 570: 36675, 575: 33722, 580: 31034, 585: 28313, 590: 25791, 595: 23301, 600: 20923, 605: 18688, 610: 16510, 615: 14587, 620: 12745, 625: 11000, 630: 9380, 635: 8008, 640: 6731, 645: 5520, 650: 4459, 655: 3597, 660: 2822, 665: 2167, 670: 1593, 675: 1148, 680: 815, 685: 546, 690: 323, 695: 166, 700: 73, 705: 30, 710: 10, 715:1, 720:1},
            'num_students': 1764571
        }
    }

new_population_factor = 2683290

def calculate_difficulty_index(easy, medium, hard):
    total_questions = easy + medium + hard
    if total_questions == 0:
        return 0

    easy_proportion = easy / total_questions
    medium_proportion = medium / total_questions
    hard_proportion = hard / total_questions

    difficulty_index = (hard_proportion * 1.8) + (medium_proportion * 1.0) + (easy_proportion * 0.2)
    
    max_index = 1.8 
    difficulty_index /= max_index

    return difficulty_index

def interpolate_rank_v2(marks, difficulty_levels, difficulty_index, new_population_factor):
    sorted_levels = sorted(difficulty_levels.keys())
    if difficulty_index < sorted_levels[0]:
        lower_difficulty = sorted_levels[0]
        upper_difficulty = sorted_levels[1]
        extrapolation_mode = "low"
    elif difficulty_index > sorted_levels[-1]:
        lower_difficulty = sorted_levels[-2]
        upper_difficulty = sorted_levels[-1]
        extrapolation_mode = "high"
    else:
        extrapolation_mode = None
        for i in range(len(sorted_levels) - 1):
            if sorted_levels[i] <= difficulty_index <= sorted_levels[i + 1]:
                lower_difficulty = sorted_levels[i]
                upper_difficulty = sorted_levels[i + 1]
                break

    lower_data = difficulty_levels[lower_difficulty]['data']
    upper_data = difficulty_levels[upper_difficulty]['data']

    lower_ranks = np.array(list(lower_data.keys()))
    lower_values = np.array(list(lower_data.values()))
    
    upper_ranks = np.array(list(upper_data.keys()))
    upper_values = np.array(list(upper_data.values()))

    num_students_lower = difficulty_levels[lower_difficulty]['num_students']
    num_students_upper = difficulty_levels[upper_difficulty]['num_students']

    adjusted_lower_values = lower_values * (new_population_factor / num_students_lower)
    adjusted_upper_values = upper_values * (new_population_factor / num_students_upper)

    lower_interp = interp1d(lower_ranks, adjusted_lower_values, bounds_error=False, fill_value="extrapolate")
    upper_interp = interp1d(upper_ranks, adjusted_upper_values, bounds_error=False, fill_value="extrapolate")
    
    predicted_rank_lower = lower_interp(marks)
    predicted_rank_upper = upper_interp(marks)

    if extrapolation_mode == "low":
        return predicted_rank_lower, predicted_rank_lower, lower_difficulty, lower_difficulty
    elif extrapolation_mode == "high":
        return predicted_rank_upper, predicted_rank_upper, upper_difficulty, upper_difficulty
    else:
        return predicted_rank_lower, predicted_rank_upper, lower_difficulty, upper_difficulty

def predict_rank(marks, easy, medium, hard):
    difficulty_index = calculate_difficulty_index(easy, medium, hard)
    print(f"difficulty index: {difficulty_index}")
    predicted_rank_lower, predicted_rank_upper, lower_difficulty, upper_difficulty = interpolate_rank_v2(
        marks, difficulty_levels, difficulty_index, new_population_factor
    )    
    if lower_difficulty == upper_difficulty:
        predicted_rank = predicted_rank_lower
    else:
        predicted_rank = (
            predicted_rank_lower + 
            (predicted_rank_upper - predicted_rank_lower) * ((difficulty_index - lower_difficulty) / (upper_difficulty - lower_difficulty))
        )
    
    return int(predicted_rank)

if __name__ == "__main__":
    easy_questions = 80
    medium_questions = 80
    hard_questions = 20
    
    student_marks = 650

    predicted_rank = predict_rank(student_marks, easy_questions, medium_questions, hard_questions)
    
    print(f"Predicted Rank for {student_marks} marks with distribution (Easy: {easy_questions}, Medium: {medium_questions}, Hard: {hard_questions}): {predicted_rank}")
